"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var orderModel_1 = require("../model/orderModel");
var controller_1 = require("./controller");
var logger_1 = require("../server/logger");
var logger = new logger_1.default("OrderController");
var OrderController = (function (_super) {
    __extends(OrderController, _super);
    function OrderController() {
        var _this = _super.call(this) || this;
        logger.info("OrderController constructed");
        return _this;
    }
    OrderController.prototype.create = function (req, res, next) {
        var _this = this;
        this.safeHandle(req, res, next, function (req, res, next, result) {
            /* start of business logic */
            var newOrder = new orderModel_1.OrderDAO(req.body);
            newOrder
                .save()
                .then(function (order) {
                result.payload = order;
                _this.handleResult(res, next, result);
            })
                .catch(function (err) {
                result = _this.internalError(result, err);
                _this.handleResult(res, next, result);
            });
            /* end of business logic */
        });
    };
    OrderController.prototype.list = function (req, res, next) {
        var _this = this;
        this.safeHandle(req, res, next, function (req, res, next, result) {
            /* start of business logic */
            orderModel_1.OrderDAO.find({})
                .then(function (orders) {
                result.payload = orders;
                _this.handleResult(res, next, result);
            })
                .catch(function (err) {
                result = _this.internalError(result, err);
                _this.handleResult(res, next, result);
            });
            /* end of business logic */
        });
    };
    OrderController.prototype.getById = function (req, res, next) {
        var _this = this;
        this.safeHandle(req, res, next, function (req, res, next, result) {
            /* start of business logic */
            orderModel_1.OrderDAO.findById(req.params.id).populate("orderItems.product").exec()
                .then(function (order) {
                result.payload = order;
                _this.handleResult(res, next, result);
            })
                .catch(function (err) {
                result = _this.internalError(result, err);
                _this.handleResult(res, next, result);
            });
            /* end of business logic */
        });
    };
    OrderController.prototype.update = function (req, res, next) {
        var _this = this;
        this.safeHandle(req, res, next, function (req, res, next, result) {
            /* start of business logic */
            var query = { '_id': req.params.id };
            orderModel_1.OrderDAO.findOneAndUpdate(query, req.body, { upsert: false, new: true, runValidators: true })
                .then(function (order) {
                result.payload = order;
                _this.handleResult(res, next, result);
            })
                .catch(function (err) {
                result = _this.internalError(result, err);
                _this.handleResult(res, next, result);
            });
            /* end of business logic */
        });
    };
    OrderController.prototype.deleteById = function (req, res, next) {
        var _this = this;
        this.safeHandle(req, res, next, function (req, res, next, result) {
            /* start of business logic */
            orderModel_1.OrderDAO.findByIdAndRemove(req.params.id)
                .then(function (order) {
                result.payload = order;
                _this.handleResult(res, next, result);
            })
                .catch(function (err) {
                result = _this.internalError(result, err);
                _this.handleResult(res, next, result);
            });
            /* end of business logic */
        });
    };
    return OrderController;
}(controller_1.Controller));
exports.default = OrderController;
//# sourceMappingURL=orderController.js.map