"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var cors = require("cors");
var bodyParser = require("body-parser");
var xmlBodyParser = require("express-xml-bodyparser");
var winston = require("winston");
var expressWinston = require("express-winston");
var commonConfiguration = require("../config/commonConfig");
var database_1 = require("./database");
var orderRouter_1 = require("../routes/orderRouter");
var chatRouter_1 = require("../routes/chatRouter");
var logger_1 = require("./logger");
var logger = new logger_1.default("Server");
var Server = (function () {
    /**
     * Constructor.
     *
     * @class Server
     * @constructor
     */
    function Server() {
        //create expressjs application
        this.app = express();
        //configure application
        this.config();
        //add routes
        this.routes();
        //add api
        this.run();
    }
    /**
     * Bootstrap the application.
     *
     * @class Server
     * @method bootstrap
     * @static
     * @return {ng.auto.IInjectorService} Returns the newly created injector for this app.
     */
    Server.bootstrap = function () {
        return new Server();
    };
    Server.prototype.run = function () {
        this.app.use(function (err, req, res, next) {
            console.log(err.stack);
            res.status(500).send({ "Error": err.stack });
        });
        this.app.listen(3000, function () {
            logger.info(commonConfiguration.APP_NAME + ' listening on port 3000!');
        });
    };
    Server.prototype.config = function () {
        var expresslogger = expressWinston.logger({
            transports: [
                new (winston.transports.File)({ filename: commonConfiguration.LOG_FILE_EXPRESS })
            ]
        });
        this.app.use(expresslogger);
        this.app.use(xmlBodyParser());
        this.app.use(bodyParser.json()); // for parsing application/json
        this.app.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded
        //allow cross domain
        this.app.use(cors());
        this.database = new database_1.default();
    };
    Server.prototype.routes = function () {
        //empty for now
        this.app.get('/', function (req, res) {
            res.send(commonConfiguration.WELCOME_WORD);
        });
        var router = express.Router();
        router.use("/order", new orderRouter_1.default());
        router.use("/chat", new chatRouter_1.default());
        this.app.use(router);
    };
    return Server;
}());
exports.default = Server;
//# sourceMappingURL=server.js.map