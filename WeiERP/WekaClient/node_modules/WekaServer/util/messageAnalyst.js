"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var keywordSearchUtil_1 = require("./keywordSearchUtil");
var commonConfig = require("../config/commonConfig");
var logger_1 = require("../server/logger");
var logger = new logger_1.default("MessageAnalyst");
var MessageAnalyst = (function () {
    function MessageAnalyst(message) {
        this.regexSymbol = commonConfig.MESSAGE_ANALYST_CONFIG.REGEX_SPLITTER;
        this.message = message;
        var messageSections = this.message.split(this.regexSymbol);
        this.result = new MessageAnalysisResult();
        for (var _i = 0, messageSections_1 = messageSections; _i < messageSections_1.length; _i++) {
            var message = messageSections_1[_i];
            var messageSection = new TextSection(message);
            this.result.add(messageSection);
        }
        logger.debug("MessageAnalyst constructed");
    }
    return MessageAnalyst;
}());
exports.MessageAnalyst = MessageAnalyst;
var MessageAnalysisResult = (function () {
    function MessageAnalysisResult() {
        this.textSections = [];
    }
    MessageAnalysisResult.prototype.add = function (textSection) {
        this.textSections.push(textSection);
    };
    MessageAnalysisResult.prototype.get = function (index) {
        try {
            return this.textSections[index];
        }
        catch (ex) {
            return null;
        }
    };
    return MessageAnalysisResult;
}());
exports.MessageAnalysisResult = MessageAnalysisResult;
var TextSection = (function () {
    function TextSection(text) {
        this.text = text;
        this.similarities = [];
        this.length = this.count(commonConfig.MESSAGE_ANALYST_CONFIG.REGEX_MIXED);
        this.countEnglish = this.count(commonConfig.MESSAGE_ANALYST_CONFIG.REGEX_ENGLISH);
        this.countNumber = this.count(commonConfig.MESSAGE_ANALYST_CONFIG.REGEX_NUMBER);
        this.countChinese = this.count(commonConfig.MESSAGE_ANALYST_CONFIG.REGEX_CHINESE);
        this.countSymbol = this.count(commonConfig.MESSAGE_ANALYST_CONFIG.REGEX_SYMBOL);
        this.similarities.push(this.calcSimilarity(0 /* Name */));
        this.similarities.push(this.calcSimilarity(2 /* Mobile */));
        this.similarities.push(this.calcSimilarity(1 /* Address */));
        this.similarities.push(this.calcSimilarity(3 /* CommodityName */));
        this.similarities.push(this.calcSimilarity(4 /* Quantity */));
        var highestSimilarity = this.getHighestSimilarity();
        if (highestSimilarity) {
            this.category = highestSimilarity.category;
        }
    }
    TextSection.prototype.getSimilarity = function (category) {
        for (var _i = 0, _a = this.similarities; _i < _a.length; _i++) {
            var similarity = _a[_i];
            if (similarity.category == category) {
                return similarity;
            }
        }
    };
    TextSection.prototype.getHighestSimilarity = function () {
        var tempSimilarity = 0;
        var highestSimilarity;
        for (var _i = 0, _a = this.similarities; _i < _a.length; _i++) {
            var similarity = _a[_i];
            if (similarity.similarity > tempSimilarity) {
                tempSimilarity = similarity.similarity;
                highestSimilarity = similarity;
            }
        }
        return highestSimilarity;
    };
    TextSection.prototype.count = function (regEx) {
        try {
            return this.text.match(regEx).length;
        }
        catch (ex) {
            return 0;
        }
    };
    TextSection.prototype.calcSimilarity = function (category) {
        var similarity = 0;
        var pattern = commonConfig.MESSAGE_ANALYST_CONFIG.getPattern(category);
        similarity = this.getRangeScore(this.countChinese, pattern.countChinese) +
            this.getRangeScore(this.countEnglish, pattern.countEnglish) +
            this.getRangeScore(this.countNumber, pattern.countNumber) +
            this.getRangeScore(this.countSymbol, pattern.countSymbol) +
            this.getKeywordScore(pattern.keywords);
        return {
            category: category,
            similarity: similarity
        };
    };
    TextSection.prototype.getKeywordScore = function (keywords) {
        var keywordSearch = new keywordSearchUtil_1.default(this.text, keywords);
        return keywordSearch.getMatchCounts();
    };
    TextSection.prototype.getRangeScore = function (count, countRange) {
        if (!countRange) {
            return 0;
        }
        else if (count >= countRange.lowerLength && count <= countRange.higherLength) {
            return 1;
        }
        else if (count < countRange.minimalLength) {
            return -1;
        }
        else if (count > countRange.maximalLength) {
            return -1;
        }
        else if (count >= countRange.minimalLength && count < countRange.lowerLength) {
            return (count - countRange.minimalLength) / (countRange.lowerLength - countRange.minimalLength);
        }
        else if (count <= countRange.maximalLength && count > countRange.higherLength) {
            return (countRange.maximalLength - count) / (countRange.maximalLength - countRange.higherLength);
        }
    };
    return TextSection;
}());
exports.TextSection = TextSection;
//# sourceMappingURL=messageAnalyst.js.map